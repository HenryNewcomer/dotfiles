#!/bin/bash

#############################################################################
#                        Author: Henry Newcomer
#############################################################################
# Description: After a new OS install, run this script to set up my custom
# software and settings
#############################################################################

#############################################################################
# Setup initial values
#############################################################################

# Used for loops awaiting user input
awaiting=true
# What distro is being used?
distro="none"


#############################################################################
# Functions
#############################################################################

function getDistro() {
  echo -e "Which Linux distro are you using?\na) Arch\nb) Solus\nc) Ubuntu"
  DISTRO_CHOICE="none"
  read DISTRO_CHOICE
  if [[ $DISTRO_CHOICE == "a" || $DISTRO_CHOICE == "arch" || $DISTRO_CHOICE == "Arch" ]]; then
    distro="arch"
  elif [[ $DISTRO_CHOICE == "b" || $DISTRO_CHOICE == "solus" || $DISTRO_CHOICE == "Solus" ]]; then
    distro="solus"
  elif [[ $DISTRO_CHOICE == "c" || $DISTRO_CHOICE == "ubuntu" || $DISTRO_CHOICE == "Ubuntu" ]]; then
    distro="ubuntu"
  else
    echo "Invalid selection. Aborting script."
    exit 1
  fi
}

function updater() {
  if [[ $distro == "solus" ]]; then
    echo ""
  elif [[ $distro == "arch" ]]; then
    sudo pacman -Syy
  elif [[ $distro == "ubuntu" ]]; then
    sudo apt update
  else
    echo "Invalid distro. Aborting."
    exit 1
  fi
}

function upgrader() {
  if [[ $distro == "solus" ]]; then
    sudo eopkg upgrade
  elif [[ $distro == "arch" ]]; then
    sudo pacman -Su
  elif [[ $distro == "ubuntu" ]]; then
    sudo apt update
  else
    echo "Invalid distro. Aborting."
    exit 1
  fi
}

function cleaner() {
  if [[ $distro == "solus" ]]; then
    sudo rm -rf ~/Downloads/new_install
    echo "Removed ~/Downloads/new_install directory."
  elif [[ $distro == "arch" ]]; then
    rm -rf ~/Downloads/new_install
    echo "Removed ~/Downloads/new_install directory."
  elif [[ $distro == "ubuntu" ]]; then
    sudo apt clean
    sudo apt autoclean
    sudo apt autoremove
    echo "Cleaned package leftovers"
    rm -rf ~/Downloads/new_install
    echo "Removed ~/Downloads/new_install directory."
  else
    echo "Invalid distro. Aborting."
    exit 1
  fi
}

# TODO: These really need fixed; pass extra params in a more shell-friendly way
function installer() {
  if [[ $distro == "solus" ]]; then
    if [[ $# -eq 1 ]]; then
      yes | sudo eopkg install $1
    elif [[ $# -eq 2 ]]; then
      yes | sudo eopkg install $1 $2
    fi
  elif [[ $distro == "arch" ]]; then
    if [[ $# -eq 1 ]]; then
      yes | sudo pacman -S $1
    elif [[ $# -eq 2 ]]; then
      yes | sudo pacman -S $1 $2
    fi
  elif [[ $distro == "ubuntu" ]]; then
    # TODO: Just change this into a for loop for n arguments
    if [[ $# -eq 1 ]]; then
      yes | sudo apt install $1
    elif [[ $# -eq 2 ]]; then
      yes | sudo apt install $1 $2
    elif [[ $# -eq 3 ]]; then
      yes | sudo apt install $1 $2 $3
    fi
  else
    echo "Invalid distro. Aborting."
    exit 1
  fi
}

function yaourtInstall() {
  echo "Creating directories for Yaourt installation..."
  mkdir -p ~/Downloads/temp/yaourt-installation
  cd ~/Downloads/temp/yaourt-installation
  # Source: https://archlinux.fr/yaourt-en
  git clone https://aur.archlinux.org/package-query.git
  cd package-query
  makepkg -si
  cd ..
  git clone https://aur.archlinux.org/yaourt.git
  cd yaourt
  makepkg -si
  cd ..
  yaourt
  yaourt -Syu --devel --aur
  # Cleanup
  rm -rf ~/Downloads/temp
}

#while [[ $awaiting ]]
#do
#  echo "testing: press y to quit, n to loop"
  #$input<from console
#done

#exit 0 # FOR DEBUGGING


#############################################################################
# Installation processes
#############################################################################

# Check if arguments were passed
if [[ $# -eq 1 ]]; then
  if [[ $1 == "solus" ]]; then
    distro="solus"
    echo "Distro set as $distro"
  elif [[ $distro == "arch" ]]; then
    distro="arch"
    echo "Distro set to $distro"
  elif [[ $distro == "ubuntu" ]]; then
    distro="ubuntu"
    echo "Distro set to $distro"
  fi
else
  # If no args were passed, ask which distro is being used
  getDistro
fi

# Check if there's any package updates
updater
# Check for current available upgrades prior to installations
upgrader


###############################################
# Start installers...                         #
###############################################

# Try to stay inside of the ~/Downloads dir as often as possible
# in case of leftover files
cd ~
mkdir -p Downloads/new_install
cd ~/Downloads/new_install

# *Important; download first*
installer curl
installer cget
installer git

# NodeJS
installer nodejs
# Update npm (which is separate from nodejs)
sudo npm install npm@latest -g
#curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
#sudo apt-get install -y nodejs
# NPM
installer npm # Required for vtop
# Just in case, double-check that npm is using the newest version
sudo npm install -g npm

##################
### TERMINALS (start)
##################
installer gvim # gVim includes +clipboard on Arch
installer zsh
# Changes the default terminal
chsh -s /usr/bin/zsh
# Oh My Zsh
sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
##################
### TERMINALS (end)
##################

# Vim Plugin
# For Vim
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# For Neovim
curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# Python
installer python
installer python3
installer python-pip
installer python-dev
installer python3-dev
sudo pip install --upgrade pip

# Main software
installer gimp
installer gparted
installer fileftp
installer thunderbird

# Extra software
installer filezilla
sudo npm install -g vtop
installer htop
# A simplistic color picker
installer gcolor3

# SSH packages
installer ssh

# FZF
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install

# Zsh Autosuggestions (based on history)
git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
# Zsh Syntax Highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

# i3wm
installer i3
installer i3lock
installer dmenu
installer feh
# Basic GUI randr editor
#installer arandr
# Determins class strings for software
installer xprop
# Allows Num Lock to be enabled at login
installer numlockx

# Browsers
installer firefox
installer qutebrowser

# Image manipulation
installer imagemagick

# For system clock
installer ntp

# Fonts
installer ttf-fira-mono
installer ttf-font-awesome
installer ttf-inconsolata
installer ttf-linux-libertine
installer ttf-ubuntu-family
installer noto-fonts

# Powerline fonts (ZSH themes use these)
#installer fonts-powerline
#installer powerline-fonts
git clone https://github.com/powerline/fonts.git --depth=1
cd fonts
./install.sh
cd ..
rm -rf fonts

if [[ $distro == "ubuntu" ]]; then
    echo "\nInstalling \"Hack\" font from repo."
    sudo apt install fonts-hack
    sudo apt install fonts-hack-ttf
    echo "\n"
fi

# Extras... Any Linux user obviously needs these
#installer neofetch
#sudo npm install cowsay
#installer sl

#################################
#  SDL2 packages
#################################


if [[ $distro == "ubuntu" ]]; then
    echo "-- Installing SDL2 packages: --\n\n"

    sudo apt install libsdl2-dev
    sudo apt install libsdl2-image-dev
    sudo apt install libsdl2-mixer-dev
    sudo apt install libsdl2-ttf-dev
    sudo apt install libsdl2-net-dev
    echo "\n"
else
    echo "\n\n------------------------------ "ATTENTION!!! ------------------------------"
    echo "SDL packages must be manually installed!\nAuto-installation hasn\'t been setup for this distro!"
    echo "------------------------------ "ATTENTION!!! ------------------------------\n\n"
fi

#################################
#  Emacs related software  /start
#################################


if [[ $distro == "ubuntu" ]]; then
    echo "\n\n------------------------------ "ATTENTION!!! ------------------------------"
    echo "Instead of grabbing Emacs from Ubuntu repo, download it manually."
    echo "------------------------------ "ATTENTION!!! ------------------------------\n\n"
    echo "Attempting to install required tools for creating Emacs application..."

    # These are used for building Emacs
    sudo apt install build-essential
    sudo apt install texinfo
    sudo apt install libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev
    sudo apt install libgtk2.0-dev
    sudo apt install libncurses-dev
    sudo apt install libxpm-dev
    sudo apt install automake
    sudo apt install autoconf
    sudo apt install gnutls-dev
    sudo apt install mailutils
else
    installer emacs
fi

# Grabs my personal settings
cd ~/
git clone https://github.com/HenryNewcomer/.emacs.d.git .emacs.d
ln -s .emacs.d/.emacs .emacs
cd ~/Downloads

installer offlineimap

# These are required for the Flycheck plugin
#sudo pip install pylint
#sudo npm install eslint

# Better search (also used within Emacs)
if [[ $distro == "ubuntu" ]]; then
    installer the_silver_searcher
elif [[ $distro == "arch" ]]; then
    installer the-silver-searcher
else
    echo "\n\n*** Manual installation of The Silver Searcher (ag) required ***\n\n"
fi

installer ripgrep

# Install (Universal) C-Tags
git clone https://github.com/universal-ctags/ctags
cd ctags
./autogen.sh
./configure
make
sudo make install

# Install Snap if on Arch distro
# Source: https://docs.snapcraft.io/installing-snap-on-arch-linux/6758
#if [[ $distro == "arch" ]]; then
#    echo "Arch distro detected.\nInstalling Snap..."

#    git clone https://aur.archlinux.org/snapd.git
#    cd snapd
#    makepkg -si

#    sudo systemctl enable --now snapd.socket

#    sudo ln -s /var/lib/snapd/snap /snap
#else
#  echo "!!! Snap wasn't installed. Manually install it!!!"
#fi

#################################
#  Emacs related software    /end
#################################


# If using Arch, install Yaourt
if [[ $distro == "arch" ]]; then
    yaourtInstall
fi

###############################################
# Done with installers                        #
###############################################

# Cleanup...
cleaner

# Enable the service for the system time
systemctl enable ntpd.service
systemctl start ntpd.service

#############################################################################
# EoF
