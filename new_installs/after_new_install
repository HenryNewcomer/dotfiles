#!/bin/bash

#############################################################################
#                        Author: Henry Newcomer
#############################################################################
# Description: After a new OS install, run this script to set up my custom
# software and settings
#############################################################################

#############################################################################
# Setup initial values
#############################################################################

# Used for loops awaiting user input
awaiting=true
# What distro is being used?
distro="none"


#############################################################################
# Functions
#############################################################################

function getDistro() {
  echo -e "Which Linux distro are you using?\na) Arch\nb) Solus\nc) Ubuntu"
  DISTRO_CHOICE="none"
  read DISTRO_CHOICE
  if [[ $DISTRO_CHOICE == "a" || $DISTRO_CHOICE == "arch" || $DISTRO_CHOICE == "Arch" ]]; then
    distro="arch"
  elif [[ $DISTRO_CHOICE == "b" || $DISTRO_CHOICE == "solus" || $DISTRO_CHOICE == "Solus" ]]; then
    distro="solus"
  elif [[ $DISTRO_CHOICE == "c" || $DISTRO_CHOICE == "ubuntu" || $DISTRO_CHOICE == "Ubuntu" ]]; then
    distro="ubuntu"
  else
    echo "Invalid selection. Aborting script."
    exit 1
  fi
}

function updater() {
  if [[ $distro == "solus" ]]; then
    echo ""
  elif [[ $distro == "arch" ]]; then
    sudo pacman -Syy
  elif [[ $distro == "ubuntu" ]]; then
    sudo apt update
  else
    echo "Invalid distro. Aborting."
    exit 1
  fi
}

function upgrader() {
  if [[ $distro == "solus" ]]; then
    sudo eopkg upgrade
  elif [[ $distro == "arch" ]]; then
    sudo pacman -Su
  elif [[ $distro == "ubuntu" ]]; then
    sudo apt update
  else
    echo "Invalid distro. Aborting."
    exit 1
  fi
}

function cleaner() {
  if [[ $distro == "solus" ]]; then
    # Currently not possible due to eopkg; wait for new version
    echo "Attempted to clean-up leftovers, but eopkg doesn't support package cleanups."
  elif [[ $distro == "arch" ]]; then
    # do nothing
    echo "..."
  elif [[ $distro == "ubuntu" ]]; then
    sudo apt clean
    sudo apt autoclean
    sudo apt autoremove
    echo "Cleaned package leftovers"
  else
    echo "Invalid distro. Aborting."
    exit 1
  fi
}

# TODO: These really need fixed; pass extra params in a more shell-friendly way
function installer() {
  if [[ $distro == "solus" ]]; then
    if [[ $# -eq 1 ]]; then
      sudo eopkg install $1
    elif [[ $# -eq 2 ]]; then
      sudo eopkg install $1 $2
    fi
  elif [[ $distro == "arch" ]]; then
    if [[ $# -eq 1 ]]; then
      sudo pacman -S $1
    elif [[ $# -eq 2 ]]; then
      sudo pacman -S $1 $2
    fi
  elif [[ $distro == "ubuntu" ]]; then
    # TODO: Just change this into a for loop for n arguments
    if [[ $# -eq 1 ]]; then
      yes | sudo apt install $1
    elif [[ $# -eq 2 ]]; then
      yes | sudo apt install $1 $2
    elif [[ $# -eq 3 ]]; then
      yes | sudo apt install $1 $2 $3
    fi
  else
    echo "Invalid distro. Aborting."
    exit 1
  fi
}

#while [[ $awaiting ]]
#do
#  echo "testing: press y to quit, n to loop"
  #$input<from console
#done

#exit 0 # FOR DEBUGGING


#############################################################################
# Installation processes
#############################################################################

# Check if arguments were passed
if [[ $# -eq 1 ]]; then
  if [[ $1 == "solus" ]]; then
    distro="solus"
    echo "Distro set as $distro"
  elif [[ $distro == "arch" ]]; then
    distro="arch"
    echo "Distro set to $distro"
  elif [[ $distro == "ubuntu" ]]; then
    distro="ubuntu"
    echo "Distro set to $distro"
  fi
else
  # If no args were passed, ask which distro is being used
  getDistro
fi

# Update repo info
updater
# Check for current available upgrades prior to installations
upgrader


###############################################
# Start installers...                         #
###############################################

# Try to stay inside of the ~/Downloads dir as often as possible
# in case of leftover files
cd ~
mkdir -p Downloads
cd ~/Downloads

# *Important; download first*
installer curl
installer cget
installer git

# NodeJS
installer nodejs
# Update npm (which is separate from nodejs)
sudo npm install npm@latest -g
#curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
#sudo apt-get install -y nodejs
# NPM
installer npm # Required for vtop

##################
### TERMINALS (start)
##################
installer vim
installer vim-gtk3 # VIM :D
installer neovim
#installer tmux
installer gnome-terminal
installer zsh
# Changes the default terminal
chsh -s /usr/bin/zsh
# Oh My Zsh
sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
##################
### TERMINALS (end)
##################

# Vim Plugin
# For Vim
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# For Neovim
curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# Python
installer python
installer python3
installer python-pip
installer python-dev
installer python3-dev
sudo pip install --upgrade pip

installer fonts-powerline
installer powerline-fonts
#wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf
#wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf
#mv PowerlineSymbols.otf ~/.local/share/fonts/
#fc-cache -vf ~/.local/share/fonts/
#mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/

# YouCompleteMe (Vim plugin)
#installer clang #not needed?
#installer build-essential cmake
#cd ~/.vim/bundle/YouCompleteMe
# JS requires NodeJS and npm
#./install.py --clang-completer --js-completer
#cd ~/Downloads

# Main software
installer gimp
installer gparted
installer fileftp
#installer tilix
installer thunderbird

# Extra software
npm install -g vtop
installer htop
# A simplistic color picker
installer gcolor3
installer screenfetch

# FZF
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install

# Zsh Autosuggestions (based on history)
git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
# Zsh Syntax Highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

# i3wm
installer i3
installer feh
# Basic GUI randr editor
#installer arandr
# Determins class strings for software
#installer xprop

# st - Simple Terminal (only tested on Solus)
# TODO: Move these into a function that filters by distro
# NOTE that I also had to run make as: make CC=clang
# Solus requried the packages found here:
# sudo eopkg it -c system.devel
cd ~/Downloads/
sudo eopkg it -c system.devel
#installer freetype2
#installer freetype2-devel
#installer fontconfig
#installer fontconfig-devel
#installer make
#installer cmake
#installer llvm-clang
#installer libx11-devel
#installer libxft-devel

# Extras... Any Linux user obviously needs these
installer neofetch
sudo npm install cowsay
installer sl

###############################################
# Done with installers                        #
###############################################

# Cleanup...
cleaner

#############################################################################
# Extra notes
#############################################################################

# For manually compiling tmux:
# sudo apt install libevent-dev
# sudo apt install libncurses-dev
# To check version: tmux -V

#############################################################################
# EoF
#############################################################################

